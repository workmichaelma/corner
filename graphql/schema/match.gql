schema {
  query: Query
}

type Match {
  id: ID
  winId: String
  matchNum: String
  matchDatetime(format: DatetimeFormatEnum): Date
  matchDay: String
  ended: Boolean
  homeTeam: MatchTeam
  awayTeam: MatchTeam
  league: League
  history(limit: Int): MatchHistory
  result: Result
  resultByOdds(orderBy: OrderByEnum): ResultByOdds
  odds(type: OddTypeEnum, orderBy: OrderByEnum, limit: Int): Odds
  isResultValid: Boolean
  tips: TipsMatch
  future: Future
  against: [AgainstMatch]
}

type AgainstMatch {
  homeTeam: MatchTeam
  awayTeam: MatchTeam
  league: League
  result: Result
  date: String
}

type MatchTeam {
  teamId: String
  teamName: String
  winId: String
  rank: String
  image: String
  history(leagueId: String, before: String): [Match]
}

type MatchHistory {
  home: [Match]
  away: [Match]
}

type Future {
  home: [FutureMatch]
  away: [FutureMatch]
}

type FutureMatch {
  date: String
  league: String
  teams: String
  daysAfter: String
}

type MatchResult {
  result: Result
  resultByOdds(orderBy: OrderByEnum): ResultByOdds
}

type MatchOdds {
  odds(type: OddTypeEnum, orderBy: OrderByEnum, limit: Int): Odds
  odd(type: OddTypeEnum): Odd
}

type Query {
  match(id: ID!): Match
  matchOdds(id: ID!): MatchOdds @cacheControl(maxAge: 30)
  matchResult(id: ID!): MatchResult @cacheControl(maxAge: 30)
}
